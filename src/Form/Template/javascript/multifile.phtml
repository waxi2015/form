<script>
	$(function(){
		Dropzone.autoDiscover = false;

		$('#<?=$this->getId($language)?>').dropzone({
			autoDiscover: false,
			url: "/wx/form/upload",
			paramName: 'file',
			previewsContainer: '.dropzone-previews',
			createImageThumbnails: false,
			maxFilesize: <?=$this->getMaxFileSize()?>,
			acceptedFiles: '<?=$this->getAcceptedFiles()?>',
			dictDefaultMessage: '<?=$this->getButtonLabel()?>',
			error: function(file, message){
				alert(message);
			},
			init: function () {
				<?=$this->getId($language)?> = this;
			},
			totaluploadprogress : function (progress) {
				$('#<?=$this->getId($language)?>-progress').removeClass('hidden');
				$('#<?=$this->getId($language)?>-progress .bar').css({width: progress + '%'});
			},
			success : function (file, response){
				$('#<?=$this->getId($language)?>-progress').addClass('hidden');

				var previewBlock = '<div class="file">';
					previewBlock += '	<a href="" class="remove">x</a>';
					previewBlock += '	<a href="<?=$this->getFileUrlBase()?>' + response.file + '">' + response.file + '</a>';
					previewBlock += '	<input type="hidden" name="<?=$this->getName(true, $language)?>[0][file]" value="' + response.file + '" />';


				<? if ($this->hasFields()): ?>
					<? foreach ($this->getFields() as $key => $field): ?>
						previewBlock += '<input id="<?=$this->getId($language)?>-<?=$field["name"]?>" name="<?=$this->getName(true, $language)?>[0][<?=$field["name"]?>]" placeholder="<?=$field["placeholder"]?>" />';
					<? endforeach; ?>
				<? endif; ?>

				previewBlock += '</div>';


				$('#<?=$this->getId($language)?>-previews').append(previewBlock);

				refreshMultifileKeys<?=$this->getId()?>();

				$('#<?=$this->formIdentifier?>').formValidation('revalidateField', '<?=$this->getName(true, $language)?>');
			},
			sending : function (file, xhr, formData) {
				formData.append('formDescriptor', $('#<?=$this->formIdentifier?> [name="formDescriptor"]').val());
				formData.append('element', '<?=$this->getName(false)?>');
				formData.append('type', 'file');
				formData.append('_token', $('#<?=$this->formIdentifier?>').find('[name="_token"]').val());
			}
		});
	
		<? if ($this->hasLimit()): ?>
			<?=$this->getId($language)?>.options.maxFiles = <?=$this->getLimit()?>;
		<? endif; ?>

		initRemoveFiles<?=$this->getId($language)?>();

		$('.file-previews').sortable({
			change: function () {
				refreshMultifileKeys<?=$this->getId($language)?>();
			}
		});
	})

	function initRemoveFiles<?=$this->getId($language)?> () {
		var removeSelector = '#<?=$this->getId($language)?>-previews .file .remove';

		$(document).off('click', removeSelector).on('click', removeSelector, {} , function(e){
			e.preventDefault();

			$(this).closest('.file').remove();

			<? if ($this->hasLimit()): ?>
				<?=$this->getId($language)?>.options.maxFiles = (parseInt(<?=$this->getId($language)?>.options.maxFiles) + 1);
			<? endif; ?>

			refreshMultifileKeys<?=$this->getId($language)?>();
		})
	}

	function refreshMultifileKeys<?=$this->getId($language)?> () {
		$('#<?=$this->getId($language)?>-previews .file').each(function(key){
			$(this).find('input').each(function(){
				var nameParts = $(this).attr('name').split('['),
					keyPart = nameParts.length - 2,
					currentName = nameParts[keyPart].replace(']',''),
					newName = '';

				$.each(nameParts, function(k,v){
					if (k == 0) {
						newName += v;
					} else if (k != keyPart) {
						newName += '[' + v;
					} else {
						newName += '[' + key + ']';
					}
				})

				$(this).attr('name', newName);
			})
		})
	}
</script>